@page "/general"

<h3>General Brainfxxk</h3>

<br />

<table class="table-bordered">
    <thead>
        <tr>
            <th align="center">&nbsp; コマンド &nbsp;</th>
            <th>&nbsp; 意味 &nbsp;</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td align="center">+</td>
            <td>&nbsp; ポインタが指す値をインクリメント &nbsp;</td>
        </tr>
        <tr>
            <td align="center">-</td>
            <td>&nbsp; ポインタが指す値をデクリメント &nbsp;</td>
        </tr>
        <tr>
            <td align="center">&gt;</td>
            <td>&nbsp; ポインタをインクリメント &nbsp;</td>
        </tr>
        <tr>
            <td align="center">&lt;</td>
            <td>&nbsp; ポインタをデクリメント &nbsp;</td>
        </tr>
        <tr>
            <td align="center">[</td>
            <td>&nbsp; ポインタが指す値が0なら、対応する <code>]</code> の直後にジャンプ &nbsp;</td>
        </tr>
        <tr>
            <td align="center">]</td>
            <td>&nbsp; ポインタが指す値が0でないなら、対応する <code>[</code> の直後にジャンプ &nbsp;</td>
        </tr>
        <tr>
            <td align="center">,</td>
            <td>&nbsp; 入力から1バイト読み込んで、ポインタが指す先に代入 &nbsp;</td>
        </tr>
        <tr>
            <td align="center">.</td>
            <td>&nbsp; ポインタが指す値を出力 &nbsp;</td>
        </tr>
        <tr>
            <td align="center">#</td>
            <td>&nbsp; <code>;</code> か改行が現れるまで、以降の文字列を無視 &nbsp;</td>
        </tr>
        <tr>
            <td align="center">;</td>
            <td>&nbsp; コメントアウト終了 &nbsp;</td>
        </tr>
    </tbody>
</table>

<br />

<textarea style="font-family: monospace;" cols="70" rows="20" @bind="Text" />
<br />
<span>
    <input type="checkbox" class="form-check-inline" @bind="@EnableCommentOut" />コメントアウトを有効
    <button class="btn btn-primary" @onclick="Execute">実行</button>
    <button class="btn btn-secondary" @onclick="Clear">クリア</button>
</span>

<br />
<br />

実行結果
<br />
<label>@Output</label>

<br />

@code {
    private string Text { get; set; } = string.Empty;
    private bool EnableCommentOut { get; set; } = true;
    private string Output { get; set; } = string.Empty;


    private void Execute()
    {
        this.Output = string.Empty;

        var commonConfig = new BFCore.Config.CommonConfig
        {
            EnableCommentOut = this.EnableCommentOut,
        };

        var commandConfig = new BFCore.Config.BFCommandConfig();

        var executer = new BrainfxxkExecuter(commonConfig, commandConfig);

        executer.Execute(this.Text);

        this.Output = executer.Output;
    }

    private void Clear()
    {
        this.Text = string.Empty;
        this.Output = string.Empty;
    }
}
