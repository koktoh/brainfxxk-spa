@page "/hibiki"

<h3>響ちゃんマジ天使言語</h3>

<table class="table table-borderless">
    <tbody>
        <tr>
            <td>
                <textarea class="text-monospace" cols="70" rows="25" @bind="this.Text" />
            </td>
            <td>
                <table class="table table-bordered table-striped thead-dark">
                    <thead>
                        <tr>
                            <th class="border-right text-center">コマンド</th>
                            <th>意味</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="border-right">@INC</td>
                            <td>ポインタが指す値をインクリメント</td>
                        </tr>
                        <tr>
                            <td class="border-right">@DEC</td>
                            <td>ポインタが指す値をデクリメント</td>
                        </tr>
                        <tr>
                            <td class="border-right">@MR</td>
                            <td>ポインタをインクリメント</td>
                        </tr>
                        <tr>
                            <td class="border-right">@ML</td>
                            <td>ポインタをデクリメント</td>
                        </tr>
                        <tr>
                            <td class="border-right">@LH</td>
                            <td>ポインタが指す値が0なら、対応する <code>@LT</code> の直後にジャンプ</td>
                        </tr>
                        <tr>
                            <td class="border-right">@LT</td>
                            <td>ポインタが指す値が0でないなら、対応する <code>@LH</code> の直後にジャンプ</td>
                        </tr>
                        <tr>
                            <td class="border-right">@READ</td>
                            <td>入力から1バイト読み込んで、ポインタが指す先に代入</td>
                        </tr>
                        <tr>
                            <td class="border-right">@WRITE</td>
                            <td>ポインタが指す値を出力</td>
                        </tr>
                        <tr>
                            <td class="border-right">#</td>
                            <td><code>;</code> か改行が現れるまで、以降の文字列を無視</td>
                        </tr>
                        <tr>
                            <td class="border-right">;</td>
                            <td>コメントアウト終了</td>
                        </tr>
                    </tbody>
                </table>
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <input type="checkbox" class="form-check-inline" @bind="@this.EnableCommentOut" />コメントアウトを有効
                <button class="btn btn-primary ml-md-4" @onclick="this.Execute">実行</button>
                <button class="btn btn-secondary ml-md-4" @onclick="this.Clear">クリア</button>
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <label class="oi oi-circle-check"> 実行結果</label>
                <br />
                <label class="border border-dark alert alert-dismissible">@this.Output</label>
            </td>
        </tr>
    </tbody>
</table>

@code {
    private const string INC = "響ちゃん";
    private const string DEC = "かわいい";
    private const string MR = "天使";
    private const string ML = "結婚しよ";
    private const string LH = "マジ";
    private const string LT = "かなさんどー";
    private const string READ = "尊い";
    private const string WRITE = "愛してる";

    private string Text { get; set; } = string.Empty;
    private bool EnableCommentOut { get; set; } = true;
    private string Output { get; set; } = string.Empty;

    private void Execute()
    {
        this.Output = string.Empty;

        var commonConfig = new CommonConfig
        {
            EnableCommentOut = this.EnableCommentOut,
        };

        var commandConfig = new BFCommandConfig
        {
            Increment = new BFCommand(INC, BFCommandType.Increment),
            Decrement = new BFCommand(DEC, BFCommandType.Decrement),
            MoveRight = new BFCommand(MR, BFCommandType.MoveRight),
            MoveLeft = new BFCommand(ML, BFCommandType.MoveLeft),
            LoopHead = new BFCommand(LH, BFCommandType.LoopHead),
            LoopTail = new BFCommand(LT, BFCommandType.LoopTail),
            Read = new BFCommand(READ, BFCommandType.Read),
            Write = new BFCommand(WRITE, BFCommandType.Write),
        };

        var executer = new BrainfxxkExecuter(commonConfig, commandConfig);

        executer.Execute(this.Text);

        this.Output = executer.Output;
    }

    private void Clear()
    {
        this.Text = string.Empty;
        this.Output = string.Empty;
    }
}
