@page "/custom"

<h3>オリジナル言語</h3>

<span class="oi oi-warning alert alert-danger border border-danger" style="font-size:x-large;">
    <b><code>aa</code> と <code>aaa</code> のように同じ文字で文字数だけを変えたようなコマンドを同時に定義すると正しく実行されません</b>
</span>

<table class="table table-borderless">
    <tbody>
        <tr>
            <td>
                <textarea class="text-monospace" cols="70" rows="25" @bind="this.Text" />
            </td>
            <td>
                <table class="table table-bordered table-striped thead-dark">
                    <thead>
                        <tr>
                            <th class="border-right text-center">コマンド</th>
                            <th>意味</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="border-right"><input type="text" @bind="@this.Inc" /></td>
                            <td>ポインタが指す値をインクリメント</td>
                        </tr>
                        <tr>
                            <td class="border-right"><input type="text" @bind="@this.Dec" /></td>
                            <td>ポインタが指す値をデクリメント</td>
                        </tr>
                        <tr>
                            <td class="border-right"><input type="text" @bind="@this.MR" /></td>
                            <td>ポインタをインクリメント</td>
                        </tr>
                        <tr>
                            <td class="border-right"><input type="text" @bind="@this.ML" /></td>
                            <td>ポインタをデクリメント</td>
                        </tr>
                        <tr>
                            <td class="border-right"><input type="text" @bind="@this.LH" /></td>
                            <td>ポインタが指す値が0なら、対応する <code>@this.LT</code> の直後にジャンプ</td>
                        </tr>
                        <tr>
                            <td class="border-right"><input type="text" @bind="@this.LT" /></td>
                            <td>ポインタが指す値が0でないなら、対応する <code>@this.LH</code> の直後にジャンプ</td>
                        </tr>
                        <tr>
                            <td class="border-right"><input type="text" @bind="@this.Read" /></td>
                            <td>入力から1バイト読み込んで、ポインタが指す先に代入</td>
                        </tr>
                        <tr>
                            <td class="border-right"><input type="text" @bind="@this.Write" /></td>
                            <td>ポインタが指す値を出力</td>
                        </tr>
                        <tr>
                            <td class="border-right"><input type="text" @bind="@this.BC" /></td>
                            <td><code>@this.EC</code> か改行が現れるまで、以降の文字列を無視</td>
                        </tr>
                        <tr>
                            <td class="border-right"><input type="text" @bind="@this.EC" /></td>
                            <td>コメントアウト終了</td>
                        </tr>
                    </tbody>
                </table>
            </td>
        </tr>
        <tr>
            <td></td>
            <td>
                <button class="btn btn-primary" @onclick="this.Reset">コマンド定義をリセット</button>
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <input type="checkbox" class="form-check-inline" @bind="@this.EnableCommentOut" />コメントアウトを有効
                <button class="btn btn-primary ml-md-4" @onclick="this.Execute">実行</button>
                <button class="btn btn-secondary ml-md-4" @onclick="this.Clear">クリア</button>
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <label class="oi oi-circle-check"> 実行結果</label>
                <br />
                <label class="border border-dark alert alert-dismissible">@this.Output</label>
            </td>
        </tr>
    </tbody>
</table>

@code {
    private const string DEF_INC = "+";
    private const string DEF_DEC = "-";
    private const string DEF_MR = ">";
    private const string DEF_ML = "<";
    private const string DEF_LH = "[";
    private const string DEF_LT = "]";
    private const string DEF_READ = ",";
    private const string DEF_WRITE = ".";
    private const string DEF_BC = "#";
    private const string DEF_EC = ";";

    private string _inc = DEF_INC;
    private string _dec = DEF_DEC;
    private string _mr = DEF_MR;
    private string _ml = DEF_ML;
    private string _lh = DEF_LH;
    private string _lt = DEF_LT;
    private string _read = DEF_READ;
    private string _write = DEF_WRITE;
    private string _bc = DEF_BC;
    private string _ec = DEF_EC;

    private string Inc { get => this._inc; set => this._inc = string.IsNullOrEmpty(value) ? DEF_INC : value; }
    private string Dec { get => this._dec; set => this._dec = string.IsNullOrEmpty(value) ? DEF_DEC : value; }
    private string MR { get => this._mr; set => this._mr = string.IsNullOrEmpty(value) ? DEF_MR : value; }
    private string ML { get => this._ml; set => this._ml = string.IsNullOrEmpty(value) ? DEF_ML : value; }
    private string LH { get => this._lh; set => this._lh = string.IsNullOrEmpty(value) ? DEF_LH : value; }
    private string LT { get => this._lt; set => this._lt = string.IsNullOrEmpty(value) ? DEF_LT : value; }
    private string Read { get => this._read; set => this._read = string.IsNullOrEmpty(value) ? DEF_READ : value; }
    private string Write { get => this._write; set => this._write = string.IsNullOrEmpty(value) ? DEF_WRITE : value; }
    private string BC { get => this._bc; set => this._bc = string.IsNullOrEmpty(value) ? DEF_BC : value; }
    private string EC { get => this._ec; set => this._ec = string.IsNullOrEmpty(value) ? DEF_EC : value; }

    private string Text { get; set; } = string.Empty;
    private bool EnableCommentOut { get; set; } = true;
    private string Output { get; set; } = string.Empty;

    private void Execute()
    {
        this.Output = string.Empty;

        var commonConfig = new CommonConfig
        {
            EnableCommentOut = this.EnableCommentOut,
        };

        var commandConfig = new BFCommandConfig
        {
            Increment = new BFCommand(this.Inc, BFCommandType.Increment),
            Decrement = new BFCommand(this.Dec, BFCommandType.Decrement),
            MoveRight = new BFCommand(this.MR, BFCommandType.MoveRight),
            MoveLeft = new BFCommand(this.ML, BFCommandType.MoveLeft),
            LoopHead = new BFCommand(this.LH, BFCommandType.LoopHead),
            LoopTail = new BFCommand(this.LT, BFCommandType.LoopTail),
            Read = new BFCommand(this.Read, BFCommandType.Read),
            Write = new BFCommand(this.Write, BFCommandType.Write),
            BeginComment = new BFCommand(this.BC, BFCommandType.BeginComment),
            EndComment = new BFCommand(this.EC, BFCommandType.EndComment),
        };

        var executer = new BrainfxxkExecuter(commonConfig, commandConfig);

        executer.Execute(this.Text);

        this.Output = executer.Output;
    }

    private void Clear()
    {
        this.Text = string.Empty;
        this.Output = string.Empty;
    }

    private void Reset()
    {
        this.Inc = DEF_INC;
        this.Dec = DEF_DEC;
        this.MR = DEF_MR;
        this.ML = DEF_ML;
        this.LH = DEF_LH;
        this.LT = DEF_LT;
        this.Read = DEF_READ;
        this.Write = DEF_WRITE;
        this.BC = DEF_BC;
        this.EC = DEF_EC;
    }
}
